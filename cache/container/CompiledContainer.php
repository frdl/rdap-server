<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'rdap.cache' => 'get1',
  'tld.cache' => 'get2',
  'tld.cache.ttl' => 'get3',
  'Pdp\\Manager' => 'get4',
  'Psr\\Log\\LoggerInterface' => 'get5',
  'manager.pdp' => 'get6',
  'Pdp\\CurlHttpClient' => 'get7',
  'hiqdev\\rdap\\core\\Infrastructure\\Serialization\\SerializerInterface' => 'get8',
  'hiqdev\\rdap\\core\\Infrastructure\\Provider\\DomainProviderInterface' => 'get9',
  'Psr\\Http\\Message\\StreamFactoryInterface' => 'get10',
  'Iodev\\Whois\\Whois' => 'get11',
  'settings' => 'get12',
  'subEntry1' => 'get13',
);

    protected function get1()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
			$directory = getcwd().'/../cache/rdap/';
			$namespace = 'rdap';
			//$defaultLifetime = 24 * 60 * 60;
			$defaultLifetime = 3 * 60 * 60;
			$cache = new \Symfony\Component\Cache\Adapter\FilesystemAdapter(    
				// a string used as the subdirectory of the root cache directory, where cache   
				// items will be stored   
				$namespace,				
   
				// the default lifetime (in seconds) for cache items that do not define their   
				// own lifetime, with a value 0 causing items to be stored indefinitely (i.e.   
				// until the files are deleted)   
				$defaultLifetime,  
				// the main cache directory (the application needs read-write permissions on it)  
				// if none is specified, a directory is created inside the system temporary directory   
				$directory
			);
			
			return $cache;
		}, 'rdap.cache');
    }

    protected function get2()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
			$directory =getcwd().'/../cache/tld/';			
			$cache = new \Pdp\Cache2($directory);			
			return $cache;
		}, 'tld.cache');
    }

    protected function get3()
    {
        return 3600;
    }

    protected function get4()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
			return new \Pdp\Manager($c->get('tld.cache'), $c->get(\Pdp\CurlHttpClient::class),$c->get('tld.cache.ttl'));
		}, 'Pdp\\Manager');
    }

    protected function get5()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
            $settings = $c->get('settings');

            $loggerSettings = $settings['logger'];
            $logger = new \Monolog\Logger($loggerSettings['name']);

            $processor = new \Monolog\Processor\UidProcessor();
            $logger->pushProcessor($processor);

            $handler = new \Monolog\Handler\StreamHandler($loggerSettings['path'], $loggerSettings['level']);
            $logger->pushHandler($handler);

            return $logger;
        }, 'Psr\\Log\\LoggerInterface');
    }

    protected function get6()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
			return $c->get(\Pdp\Manager::class);
		}, 'manager.pdp');
    }

    protected function get7()
    {
        $object = new Pdp\CurlHttpClient([
        ]);
        return $object;
    }

    protected function get8()
    {
        $object = new hiqdev\rdap\core\Infrastructure\Serialization\Symfony\SymfonySerializer();
        return $object;
    }

    protected function get9()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container) { 
			  $whoisDomainProvider = new \hiqdev\rdap\WhoisProxy\Provider\WhoisDomainProvider2($container->get(\Iodev\Whois\Whois::class));
			  return $whoisDomainProvider;
		  }, 'hiqdev\\rdap\\core\\Infrastructure\\Provider\\DomainProviderInterface');
    }

    protected function get10()
    {
        $object = new Slim\Psr7\Factory\StreamFactory();
        return $object;
    }

    protected function get11()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $container) { 
			return \Iodev\Whois\Whois::create(); 
		}, 'Iodev\\Whois\\Whois');
    }

    protected function get13()
    {
        return [
            'name' => 'rdap-server',
            'path' => './../logs/app.log',
            'level' => 400,
        ];
    }

    protected function get12()
    {
        return [
            'displayErrorDetails' => false,
            'logger' => $this->get13(),
        ];
    }

}
